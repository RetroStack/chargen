{"version":3,"file":"component---src-pages-load-rom-tsx-6ea816443b9f6a8bb95a.js","mappings":"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","sources":["webpack://trs-80-model-1-debugging/./src/components/load_rom/InputPane.tsx","webpack://trs-80-model-1-debugging/./src/components/load_rom/SavePane.tsx","webpack://trs-80-model-1-debugging/./src/pages/load_rom.tsx"],"sourcesContent":["import React from \"react\";\n\nimport Sheet from \"@mui/joy/Sheet\";\nimport Grid from \"@mui/joy/Grid\";\nimport Snackbar from \"@mui/joy/Snackbar\";\nimport Typography from \"@mui/joy/Typography\";\nimport Tab from \"@mui/joy/Tab\";\nimport Tabs from \"@mui/joy/Tabs\";\nimport TabList from \"@mui/joy/TabList\";\nimport TabPanel from \"@mui/joy/TabPanel\";\nimport Button from \"@mui/joy/Button\";\nimport Textarea from \"@mui/joy/Textarea\";\nimport FormLabel from \"@mui/joy/FormLabel\";\nimport FormHelperText from \"@mui/joy/FormHelperText\";\nimport FormControl from \"@mui/joy/FormControl\";\nimport { useDropzone } from \"react-dropzone\";\nimport UploadFile from \"@mui/icons-material/UploadFile\";\n\ntype PropType = {\n  onLoad: (byteArray: number[]) => void;\n};\n\nconst InputPane: React.FC<PropType> = (props) => {\n  const { onLoad } = props;\n\n  const [JSONData, setJSONData] = React.useState(\"\");\n\n  const [errorMsg, setErrorMsg] = React.useState<string | null>(null);\n\n  // Submits binary data\n  const submitByteArray = (byteArray: number[]) => {\n    onLoad(byteArray);\n  };\n  const submitJSON = () => {\n    try {\n      const data = JSON.parse(JSONData);\n      const byteArray = new Array<number>(data);\n\n      setErrorMsg(null);\n      onLoad(byteArray);\n    } catch (error) {\n      let message;\n\n      if (error instanceof Error) {\n        message = error.message;\n      } else {\n        message = String(error);\n      }\n\n      setErrorMsg(\"Error while parsing JSON: \" + message);\n    }\n  };\n\n  // Reads drag-and-drop files and sets JSON data\n  const onDrop = React.useCallback((acceptedFiles: File[]) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onabort = () => setErrorMsg(\"File reading was aborted.\");\n      reader.onerror = () => setErrorMsg(\"File reading has failed.\");\n      reader.onload = () => {\n        const binaryStr = reader.result;\n        if (binaryStr instanceof ArrayBuffer) {\n          submitByteArray(Array.from(new Uint8Array(binaryStr)));\n        } else {\n          setErrorMsg(\"File contents were read as non-binary.\");\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={errorMsg != null}\n        autoHideDuration={5000}\n        disableWindowBlurListener={true}\n        color={\"danger\"}\n        size={\"lg\"}\n        onClose={() => {\n          setErrorMsg(null);\n        }}\n      >\n        {errorMsg}\n      </Snackbar>\n      <Grid xs={12}>\n        <Typography level=\"title-lg\">Input</Typography>\n      </Grid>\n      <Grid xs={12}>\n        <Sheet variant=\"outlined\">\n          <Tabs>\n            <TabList>\n              <Tab variant=\"plain\" color=\"neutral\">\n                File Drop\n              </Tab>\n              <Tab variant=\"plain\" color=\"neutral\">\n                JSON\n              </Tab>\n            </TabList>\n            <TabPanel value={0} sx={{ minHeight: \"650px\" }}>\n              <div {...getRootProps()}>\n                <div\n                  style={{\n                    border: \"1px dashed black\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    minHeight: \"610px\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <input {...getInputProps()} />\n                  <UploadFile />\n                  <p>Drag 'n' drop file here, or click to select file</p>\n                </div>\n              </div>\n            </TabPanel>\n            <TabPanel value={2} sx={{ minHeight: \"650px\" }}>\n              <FormControl>\n                <FormLabel>JSON byte array:</FormLabel>\n                <Textarea\n                  minRows={15}\n                  maxRows={15}\n                  placeholder=\"[68, 43, ...]\"\n                  variant=\"outlined\"\n                  value={JSONData}\n                  onChange={(event) => setJSONData(event.target.value)}\n                />\n                <FormHelperText>Enter the binary data from a JSON number array.</FormHelperText>\n                <Button onClick={submitJSON}>Load</Button>\n              </FormControl>\n            </TabPanel>\n          </Tabs>\n        </Sheet>\n      </Grid>\n    </>\n  );\n};\n\nexport default InputPane;\n","import React from \"react\";\n\nimport Sheet from \"@mui/joy/Sheet\";\nimport Grid from \"@mui/joy/Grid\";\nimport Textarea from \"@mui/joy/Textarea\";\nimport FormControl from \"@mui/joy/FormControl\";\nimport FormLabel from \"@mui/joy/FormLabel\";\nimport Button from \"@mui/joy/Button\";\nimport Box from \"@mui/joy/Box\";\nimport { downloadData } from \"../../utils/binary\";\nimport { copyToClipboard } from \"../../utils/clipboard\";\nimport CopyAll from \"@mui/icons-material/CopyAll\";\nimport Snackbar from \"@mui/joy/Snackbar\";\n\ntype PropType = {\n  data: number[];\n  onSaveBack: () => void;\n};\n\nconst SavePane: React.FC<PropType> = (props) => {\n  const { data, onSaveBack } = props;\n\n  const [errorMsg, setErrorMsg] = React.useState<string | null>(null);\n\n  const resultJSON = JSON.stringify(data);\n\n  const download = () => {\n    downloadData(new Uint8Array(data), \"rom.bin\");\n  };\n\n  const copy = () => {\n    copyToClipboard(resultJSON);\n  };\n\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={errorMsg != null}\n        autoHideDuration={5000}\n        disableWindowBlurListener={true}\n        color={\"danger\"}\n        size={\"lg\"}\n        onClose={() => {\n          setErrorMsg(null);\n        }}\n      >\n        {errorMsg}\n      </Snackbar>\n      <Grid xs={12}>\n        <Sheet variant=\"outlined\" sx={{ p: 4 }}>\n          <FormControl>\n            <FormLabel>JSON byte array:</FormLabel>\n            <Textarea minRows={5} maxRows={5} variant=\"outlined\" value={resultJSON} readOnly={true} />\n          </FormControl>\n        </Sheet>\n      </Grid>\n      <Grid xs={12}>\n        <Sheet variant=\"outlined\" sx={{ p: 4 }}>\n          <Grid container spacing={2} sx={{ flexGrow: 1 }}>\n            <Grid xs={3}>\n              <Button loading={false} onClick={onSaveBack} variant=\"soft\" color=\"neutral\">\n                Back\n              </Button>\n            </Grid>\n            <Grid xs={3}>\n              <Button loading={false} onClick={copy} variant=\"solid\">\n                <CopyAll />\n                Copy To Clipboard\n              </Button>\n            </Grid>\n            <Grid xs={6}>\n              <Box display=\"flex\" justifyContent=\"flex-end\">\n                <Button loading={false} onClick={download} variant=\"solid\">\n                  Download Binary\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n        </Sheet>\n      </Grid>\n    </>\n  );\n};\n\nexport default SavePane;\n","import React from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\n\nimport Grid from \"@mui/joy/Grid\";\nimport Layout from \"../components/Layout\";\nimport IndicatorTopStepper from \"../components/Stepper\";\n\nimport InputPane from \"../components/load_rom/InputPane\";\nimport SavePane from \"../components/load_rom/SavePane\";\n\nimport FileDownload from \"@mui/icons-material/FileDownload\";\nimport Upload from \"@mui/icons-material/Upload\";\n\nconst LOAD_STEPS = [\n  {\n    text: \"Input\",\n    Icon: <Upload />,\n  },\n  {\n    text: \"Save\",\n    Icon: <FileDownload />,\n  },\n];\n\nconst STEP_INPUT = 0;\nconst STEP_SAVE = 1;\n\nconst LoadPage: React.FC<PageProps> = () => {\n  const [currentStep, setCurrentStep] = React.useState(STEP_INPUT);\n\n  const [byteArray, setByteArray] = React.useState<number[] | null>(null);\n\n  const onLoad = (byteArray: number[]) => {\n    setByteArray(byteArray);\n    setCurrentStep(STEP_SAVE);\n  };\n\n  const onSaveBack = () => {\n    setCurrentStep(STEP_INPUT);\n  };\n\n  let inputPaneEl = null;\n  if (currentStep === STEP_INPUT) {\n    inputPaneEl = <InputPane onLoad={onLoad} />;\n  }\n\n  let savePaneEl = null;\n  if (currentStep === STEP_SAVE && byteArray) {\n    savePaneEl = <SavePane data={byteArray} onSaveBack={onSaveBack} />;\n  }\n\n  return (\n    <Layout>\n      <Grid container spacing={2} sx={{ flexGrow: 1, paddingBottom: \"2rem\" }}>\n        <IndicatorTopStepper steps={LOAD_STEPS} currentStep={currentStep} />\n      </Grid>\n      {inputPaneEl}\n      {savePaneEl}\n    </Layout>\n  );\n};\n\nexport default LoadPage;\n\nexport const Head: HeadFC = () => <title>ROM Load</title>;\n"],"names":["props","onLoad","JSONData","setJSONData","React","errorMsg","setErrorMsg","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","onerror","onload","binaryStr","result","byteArray","ArrayBuffer","Array","from","Uint8Array","readAsArrayBuffer","getRootProps","getInputProps","useDropzone","___EmotionJSX","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","disableWindowBlurListener","color","size","onClose","Grid","xs","Typography","level","Sheet","variant","Tabs","TabList","Tab","TabPanel","value","sx","minHeight","style","border","display","flexDirection","justifyContent","alignItems","cursor","UploadFile","FormControl","FormLabel","Textarea","minRows","maxRows","placeholder","onChange","event","target","FormHelperText","Button","onClick","data","JSON","parse","error","message","Error","String","onSaveBack","resultJSON","stringify","p","readOnly","container","spacing","flexGrow","loading","copyToClipboard","CopyAll","Box","downloadData","LOAD_STEPS","text","Icon","Upload","FileDownload","currentStep","setCurrentStep","setByteArray","inputPaneEl","InputPane","savePaneEl","SavePane","Layout","paddingBottom","IndicatorTopStepper","steps","Head"],"sourceRoot":""}