{"version":3,"file":"component---src-pages-result-tsx-0c9623dd6fbdc1373bd6.js","mappings":"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","sources":["webpack://trs-80-model-1-debugging/./src/pages/result.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\n\nimport Sheet from \"@mui/joy/Sheet\";\nimport Grid from \"@mui/joy/Grid\";\nimport Button from \"@mui/joy/Button\";\nimport Box from \"@mui/joy/Box\";\n\nimport CharacterSet from \"../components/CharacterSet\";\nimport SearchPane from \"../components/index/SearchPane\";\n\nimport charsets from \"../chargen\";\nimport { downloadData, charsetToByteArray } from \"../utils/binary\";\n\nconst ListPage: React.FC<PageProps> = () => {\n  const [selectedCharsets, setSelectedCharsets] = React.useState<number[]>([]);\n\n  const charsetEl = selectedCharsets.map((selectedCharset, idx) => {\n    const charset = charsets[selectedCharset];\n    return (\n      <Sheet key={idx} variant=\"outlined\" sx={{ p: 4 }}>\n        {charset.title} {charset.notes}\n        <CharacterSet dataWidth={charset.dataWidth} characters={charset.data}></CharacterSet>\n        <Button\n          loading={false}\n          variant=\"solid\"\n          onClick={() => {\n            let newList = selectedCharsets.slice(0);\n            newList.splice(idx, 1);\n            setSelectedCharsets(newList);\n          }}\n        >\n          Delete\n        </Button>\n      </Sheet>\n    );\n  });\n\n  const inverse = () => {\n    setSelectedCharsets(selectedCharsets.slice(0).reverse());\n  };\n  const bitFlip = () => {\n    const maxBits = Math.ceil(Math.log(selectedCharsets.length) / Math.log(2));\n    const flipBits = (num: number) => {\n      let rev = 0;\n      for (let i = 0; i < maxBits; i++) {\n        rev = (rev << 1) | (num & 1);\n        num = num >> 1;\n      }\n      return rev;\n    };\n    const newSelectedCharsets = selectedCharsets\n      .map((_v, idx) => {\n        const index = flipBits(idx);\n        return selectedCharsets[index];\n      })\n      .filter((val) => val != null);\n    setSelectedCharsets(newSelectedCharsets);\n  };\n\n  const download = () => {\n    const data = selectedCharsets.reduce<number[]>((acc, charsetIndex) => {\n      const charset = charsets[charsetIndex];\n      const byteArray = charsetToByteArray(charset.data, charset.dataWidth);\n      for (let i = 0; i < byteArray.length; i++) {\n        acc.push(byteArray[i]);\n      }\n      return acc;\n    }, []);\n    downloadData(new Uint8Array(data), \"character_set.bin\");\n  };\n\n  return (\n    <>\n      <Grid container spacing={2} sx={{ flexGrow: 1 }}>\n        <Grid xs={6}>\n          <SearchPane\n            onClick={(event) => {\n              const list = selectedCharsets.concat([event.charsetIndex]);\n              setSelectedCharsets(list);\n            }}\n          />\n        </Grid>\n        <Grid xs={6}>\n          <Sheet variant=\"outlined\" sx={{ p: 4 }}>\n            <Grid container spacing={2} sx={{ flexGrow: 1 }}>\n              <Grid>{charsetEl}</Grid>\n            </Grid>\n            <Grid container spacing={2} sx={{ flexGrow: 1 }}>\n              <Grid xs={3}>\n                <Button loading={false} onClick={inverse} variant=\"solid\">\n                  Inverse\n                </Button>\n              </Grid>\n              <Grid xs={3}>\n                <Button loading={false} onClick={bitFlip} variant=\"solid\">\n                  Bit-Flip\n                </Button>\n              </Grid>\n              <Grid xs={6}>\n                <Box display=\"flex\" justifyContent=\"flex-end\">\n                  <Button loading={false} onClick={download} variant=\"solid\">\n                    Download Binary\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </Sheet>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default ListPage;\n\nexport const Head: HeadFC = () => <title>Character Generator List</title>;\n"],"names":["selectedCharsets","setSelectedCharsets","React","charsetEl","map","selectedCharset","idx","charset","charsets","___EmotionJSX","Sheet","key","variant","sx","p","title","notes","CharacterSet","dataWidth","characters","data","Button","loading","onClick","newList","slice","splice","Grid","container","spacing","flexGrow","xs","SearchPane","event","list","concat","charsetIndex","reverse","maxBits","Math","ceil","log","length","newSelectedCharsets","_v","index","num","rev","i","flipBits","filter","val","Box","display","justifyContent","reduce","acc","byteArray","charsetToByteArray","push","downloadData","Uint8Array","Head"],"sourceRoot":""}